---
description: 당근마켓 클론 코딩 실습을 위한 표준화된 개발 가이드
globs: src/**/*.{js,jsx,ts,tsx,css,scss}
alwaysApply: true
---

# 🥕 당근마켓 클론 코딩 실습 규칙

이 규칙은 모든 실습자가 **일관된 수준의 당근마켓 클론**을 구현할 수 있도록 자동 가이드합니다.

## 🎯 **필수 컴포넌트 구조**

### **HeroSection 컴포넌트**
- **위치**: `src/components/HeroSection.jsx`
- **필수 요소**:
  ```jsx
  // ✅ 반드시 포함해야 할 구조
  const HeroSection = () => {
    return (
      <section className="hero-section">
        <h1>{currentLocation}에서 <AnimatedText /> 찾고 계신가요?</h1>
        <SearchForm />
      </section>
    );
  };
  ```
- **동적 텍스트**: ['동네친구', '맛집', '중고거래', '알바'] 순환
- **검색창**: placeholder "검색어를 입력해주세요"

### **CategoryGrid 컴포넌트**
- **위치**: `src/components/CategoryGrid.jsx`
- **7개 카테고리 필수**: 중고거래, 알바, 부동산, 중고차, 동네업체, 동네생활, 모임
- **반응형 그리드**: 모바일 1열 → 태블릿 2열 → 데스크톱 4열
- **아이콘 + 텍스트** 구조 필수

### **PopularTags 컴포넌트**
- **위치**: `src/components/PopularTags.jsx`
- **가로 스크롤** 구현 필수
- **17개 태그**: 에어컨, 노트북, 원룸, 현대 중고차 등
- **"인기 검색어" 라벨** 데스크톱에서만 표시

### **PopularLocations 컴포넌트**
- **위치**: `src/components/PopularLocations.jsx`
- **20개 지역** 표시
- **Flex wrap** 레이아웃

## 📁 **데이터 구조 표준**

### **반드시 사용할 데이터 파일**
```javascript
// src/data/mockData.js - 이 파일을 생성하고 사용하세요
export const categories = [
  {
    id: 'buy-sell',
    name: '중고거래',
    href: '/kr/buy-sell',
    color: '#FF6F0F',
    // SVG path 포함
  }
  // ... 7개 카테고리
];

export const currentLocation = {
  name: '정자동',
  code: '1339'
};

export const animatedKeywords = [
  '동네친구', '맛집', '중고거래', '알바', '부동산', '중고차', '동네업체'
];
```

### **컴포넌트에서 데이터 import 방식**
```jsx
// ✅ DO: 표준 데이터 사용
import { categories, popularTags, currentLocation } from '../data/mockData';

// ❌ DON'T: 하드코딩
const categories = [
  { name: '중고거래' }, // 이렇게 하지 마세요
];
```

## 🎨 **스타일링 표준**

### **색상 팔레트 (필수 사용)**
```css
:root {
  --primary: #FF6F0F;
  --secondary: #FF9F30;
  --text: #212529;
  --text-muted: #6C757D;
  --background: #FFFFFF;
  --border: #DEE2E6;
}
```

### **반응형 브레이크포인트**
```css
/* 모바일 우선 접근법 사용 */
.component {
  /* 기본: 모바일 스타일 */
}

@media (min-width: 768px) {
  /* 태블릿 스타일 */
}

@media (min-width: 1024px) {
  /* 데스크톱 스타일 */
}
```

### **CategoryGrid 반응형 필수 구현**
```css
.category-grid {
  display: grid;
  grid-template-columns: 1fr; /* 모바일 */
  gap: 1rem;
}

@media (min-width: 768px) {
  .category-grid {
    grid-template-columns: repeat(2, 1fr); /* 태블릿 */
  }
}

@media (min-width: 1024px) {
  .category-grid {
    grid-template-columns: repeat(4, 1fr); /* 데스크톱 */
  }
}
```

## ⚡ **필수 기능 구현**

### **동적 텍스트 애니메이션 (HeroSection)**
```jsx
// ✅ 반드시 이 패턴으로 구현하세요
const [currentKeyword, setCurrentKeyword] = useState(0);

useEffect(() => {
  const interval = setInterval(() => {
    setCurrentKeyword(prev => (prev + 1) % animatedKeywords.length);
  }, 3000);
  return () => clearInterval(interval);
}, []);
```

### **가로 스크롤 (PopularTags)**
```css
.tags-container {
  display: flex;
  overflow-x: auto;
  gap: 0.5rem;
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE */
}

.tags-container::-webkit-scrollbar {
  display: none; /* Chrome, Safari */
}
```

## 🚫 **금지 사항**

### **❌ 절대 하지 말 것**
- **HTML 복사 붙여넣기**: 원본 당근마켓 HTML을 그대로 복사하지 마세요
- **인라인 스타일 남발**: style={{}} 대신 CSS 클래스 사용
- **하드코딩**: 데이터를 직접 컴포넌트에 작성하지 마세요
- **컴포넌트 미분리**: 모든 코드를 App.js에 넣지 마세요

### **⚠️ 주의 사항**
- **Key prop 필수**: map() 사용 시 반드시 key 설정
- **useEffect cleanup**: interval 사용 시 cleanup 함수 필수
- **접근성 고려**: alt, aria-label 등 설정

## 📊 **컴포넌트 구조 패턴**

### **함수형 컴포넌트 표준 구조**
```jsx
// ✅ 이 구조를 따르세요
import React, { useState, useEffect } from 'react';
import { 필요한데이터 } from '../data/mockData';
import './ComponentName.css';

const ComponentName = () => {
  // 1. State 선언
  const [state, setState] = useState(initialValue);
  
  // 2. Effect hooks
  useEffect(() => {
    // logic
    return () => {
      // cleanup
    };
  }, [dependencies]);
  
  // 3. Event handlers
  const handleEvent = () => {
    // handler logic
  };
  
  // 4. Render
  return (
    <section className="component-name">
      {/* JSX */}
    </section>
  );
};

export default ComponentName;
```

## 🔧 **성능 최적화 필수 사항**

### **React.memo 사용**
```jsx
// 리스트 아이템 컴포넌트는 memo 처리
const CategoryItem = React.memo(({ category }) => {
  return (
    <div className="category-item">
      {/* content */}
    </div>
  );
});
```

### **이미지 최적화**
```jsx
// SVG 아이콘 사용 시
<svg viewBox="0 0 24 24" width="24" height="24">
  <path d={iconPath} fill={color} />
</svg>
```

## 📱 **App.js 통합 구조**

```jsx
// ✅ 최종 App.js 구조
import React from 'react';
import HeroSection from './components/HeroSection';
import PopularTags from './components/PopularTags';
import CategoryGrid from './components/CategoryGrid';
import PopularLocations from './components/PopularLocations';
import './App.css';

function App() {
  return (
    <div className="App">
      <HeroSection />
      <PopularTags />
      <CategoryGrid />
      <PopularLocations />
    </div>
  );
}

export default App;
```

## ✅ **완성도 체크리스트**

구현 완료 시 다음을 확인하세요:

- [ ] 4개 컴포넌트 모두 분리되어 구현됨
- [ ] mockData.js 파일 사용함
- [ ] 반응형 디자인 적용됨 (모바일/태블릿/데스크톱)
- [ ] 동적 텍스트 애니메이션 작동함
- [ ] 가로 스크롤 구현됨
- [ ] 7개 카테고리 모두 표시됨
- [ ] 일관된 색상 팔레트 사용함
- [ ] 콘솔 에러 없음
- [ ] 접근성 속성 포함됨 (alt, aria-label)
- [ ] 성능 최적화 적용됨 (memo, cleanup)

## 🤖 **AI 응답 가이드라인**

### **권장 응답 패턴**
```
1. 문제 파악 → 표준 방식 제안 → 예시 제공 → 확인 요청
2. "mockData.js 파일에서 [데이터]를 import해서 사용하세요"
3. "모바일 우선으로 작성한 후 미디어 쿼리를 추가하세요"
4. "React.memo로 성능 최적화를 고려해보세요"
```

### **피해야 할 응답**
```
❌ 하드코딩된 데이터 제공
❌ 복잡한 라이브러리 제안 (기본 기능 우선)
❌ 전체 완성 코드 한 번에 제공 (단계별 학습 중시)
❌ HTML 복사 붙여넣기 권장
```

### **완성도 검증 질문**
실습자가 완료했다고 할 때:
```
"완성하셨군요! 다음을 확인해주세요:
1. 4개 컴포넌트 모두 분리되어 있나요?
2. mockData.js 데이터를 사용하나요?
3. 모바일/태블릿/데스크톱 반응형이 되나요?
4. 동적 애니메이션이 작동하나요?
5. 콘솔 에러가 없나요?"
```

💡 **AI 어시스턴트 참고**: 이 규칙에 따라 실습자를 가이드하되, 창의성을 억압하지 말고 기본 구조와 표준을 지키면서 개인적인 개선사항을 제안하세요.
