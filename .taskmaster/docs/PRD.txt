<context>
# Overview  
당근마켓 랜딩페이지 클론 프로젝트는 모던 프론트엔드 프레임워크 강의를 위한 실습 프로젝트입니다. React를 사용하여 당근마켓의 메인 랜딩페이지를 완전히 복제하는 것을 목표로 하며, 학습자들이 React의 핵심 개념과 모던 웹 개발 기술을 실습할 수 있도록 설계되었습니다.

이 프로젝트는 실제 서비스의 UI/UX를 따라 구현함으로써 실무에 가까운 개발 경험을 제공하며, 컴포넌트 기반 아키텍처, 상태 관리, 반응형 디자인, 그리고 모던 CSS 기법을 학습할 수 있습니다.

# Core Features  
## 1. 헤더 네비게이션
- 당근마켓 로고 구현
- "앱 다운로드" 버튼
- 반응형 헤더 디자인

## 2. 메인 히어로 섹션
- 동적 위치 기반 메시지 ("정자동에서 맛집 찾고 계신가요?")
- 지역 선택 드롭다운 컴포넌트
- 통합 검색 입력창
- 인기 검색어 자동완성 태그들

## 3. 카테고리 아이콘 그리드
- 7개 주요 카테고리 (중고거래, 알바, 부동산, 중고차, 동네업체, 동네생활, 모임)
- 아이콘과 텍스트가 결합된 카드형 레이아웃
- 호버 효과 및 클릭 인터랙션

## 4. 검색 태그 섹션
- 동적으로 생성되는 인기 검색어 태그
- 태그 클릭 시 검색창에 자동 입력 기능

## 5. 반응형 디자인
- 모바일, 태블릿, 데스크톱 대응
- CSS Grid 및 Flexbox 활용
- 미디어 쿼리를 통한 반응형 레이아웃

# User Experience  
## 사용자 페르소나
- **주요 사용자**: React 학습자 (초급-중급)
- **보조 사용자**: 프론트엔드 개발 강사

## 핵심 사용자 플로우
1. 페이지 로딩 → 헤더 및 메인 섹션 표시
2. 지역 선택 드롭다운 클릭 → 지역 목록 표시 및 선택
3. 검색창 상호작용 → 입력, 자동완성, 검색 실행
4. 카테고리 카드 호버/클릭 → 시각적 피드백
5. 인기 검색어 태그 클릭 → 검색창에 자동 입력

## UI/UX 고려사항
- 당근마켓의 브랜드 컬러 (#FF7E36) 정확한 구현
- 모던하고 깔끔한 디자인 언어
- 직관적인 사용자 인터페이스
- 빠른 로딩 속도와 부드러운 애니메이션
</context>
<PRD>
# Technical Architecture  
## 시스템 컴포넌트
- **React 18**: 최신 React 기능 활용 (Hooks, Functional Components)
- **Vite**: 빠른 번들러 및 개발 서버 (ESM 기반, HMR 지원)
- **TypeScript**: 타입 안정성 확보
- **CSS Modules/Styled-components**: 컴포넌트 스타일링
- **React Router**: SPA 라우팅 및 네비게이션
- **HTTP 클라이언트**: fetch API 및 axios를 통한 API 통신
- **상태관리**: useState → Context API → **Redux Toolkit (필수)**

## 컴포넌트 구조
```
App
├── Header
│   ├── Logo
│   └── DownloadButton
├── HeroSection
│   ├── LocationSelector
│   ├── SearchBar
│   └── PopularTags
└── CategoryGrid
    └── CategoryCard (x7)
```

## 데이터 모델
- **지역 데이터**: 드롭다운용 지역 목록 (JSON)
- **카테고리 데이터**: 카테고리 정보 (아이콘, 텍스트, 링크)
- **검색어 데이터**: 인기 검색어 목록

## 상태 관리 전략 (단계별 학습)
- **Phase 1**: 반응형 기반 시스템 구축 + 프로젝트 초기 설정
- **Phase 2-6**: 컴포넌트별 구현 (모바일 퍼스트 반응형 + React 기본 개념)
- **Phase 7-8**: API 호출 및 라우팅을 통한 복잡한 상태 처리
- **Phase 9**: React Context API 도입 및 전역 상태 관리
- **Phase 10**: Redux Toolkit으로 전환 실습 (필수 - Context API 한계 체험 및 Redux 패턴 학습)

## 스타일링 접근법
- CSS Grid/Flexbox 기반 레이아웃
- CSS Custom Properties (CSS 변수) 활용
- 모바일 퍼스트 반응형 디자인
- 부드러운 전환 효과 및 호버 애니메이션

# Development Roadmap  

## 🎓 교육 방식 안내
각 Phase는 **단일 프로젝트**에서 진행됩니다:
- **🏗️ 점진적 개발**: main/ 프로젝트에서 단계별로 기능을 추가하며 React 개념 학습
- **🎨 일관된 디자인**: 모든 단계에서 통일된 당근마켓 스타일 적용 (다크 테마 포함)
- **📌 Git Checkpoint**: 각 Phase 완료 시점마다 체크포인트를 만들어 언제든 복구 가능

## Phase 1: 프로젝트 초기 설정 및 반응형 기반 구축
### 🏗️ Main Project
- Vite + React + TypeScript 프로젝트 생성
- 기본 폴더 구조 및 컴포넌트 파일 생성
- CSS Reset 및 기본 스타일 설정
- 당근마켓 브랜드 컬러 및 폰트 적용

### 📱 반응형 기반 시스템 구축
- **브레이크포인트 시스템 정의**:
  - 모바일: 320px - 768px (기본 스타일)
  - 태블릿: 768px - 1024px (중간 확장)
  - 데스크톱: 1024px 이상 (최종 확장)
- **CSS 변수 및 디자인 토큰**:
  - 반응형 폰트 크기 (clamp() 함수 활용)
  - 유동적 간격 시스템 (vw, rem 단위)
  - 디바이스별 최적화된 색상 대비
- **모바일 퍼스트 CSS 구조**:
  - 기본 스타일은 모바일 우선
  - @media (min-width) 점진적 확장 방식
  - 터치 친화적 기본 인터랙션 설계

### 📋 Design Reference (개발 참고용)
- **개발자 도구 Elements 탭**: 실제 렌더링된 HTML 구조 추출
- **Computed Styles**: 적용된 CSS 스타일 값들 수집
- **Assets 수집**: 필요한 이미지, 아이콘, 폰트 파일들
- `/reference/` 폴더에 정리하여 픽셀 퍼펙트 구현 참조

## Phase 2: 헤더 컴포넌트 구현 (모바일 퍼스트 반응형)
- **모바일 우선 구현**: 
  - Logo + 햄버거 메뉴 버튼 기본 레이아웃
  - 터치 친화적 44px 최소 터치 타겟 적용
  - 모바일에 최적화된 네비게이션 드로어
- **점진적 확장 (태블릿/데스크톱)**:
  - 768px+ : 햄버거 → 일부 메뉴 아이템 표시
  - 1024px+ : 풀 네비게이션 메뉴 표시
- **기본 이벤트 핸들링**: 
  - onClick 이벤트로 다운로드 버튼 기능 구현
  - 모바일 메뉴 토글 상태 관리 (useState)
- **동적 스타일링**: 
  - 디바이스별 호버/터치 상태 처리
  - CSS-in-JS 또는 CSS 모듈을 활용한 반응형 스타일링

## Phase 3: 메인 히어로 섹션 & LocationSelector 구현 (모바일 퍼스트)
- **모바일 우선 레이아웃**:
  - 세로 스택 구조: 제목 → 위치선택 → 검색창
  - 작은 화면에 최적화된 폰트 크기 (clamp() 활용)
  - 터치 친화적 드롭다운 디자인
- **점진적 확장**:
  - 768px+: 제목과 컨트롤들의 가로 배치 고려
  - 1024px+: 큰 제목, 여백 증가, 가로 중심 정렬
- **React 기본 개념 학습**:
  - **useState Hook**: 드롭다운 열림/닫힘, 선택된 지역 상태 관리
  - **Props 패턴**: 선택된 지역을 부모로 전달하는 데이터 흐름 이해
  - **조건부 렌더링**: 위치에 따른 메시지 동적 표시
  - **이벤트 핸들링**: onClick, onChange, 터치 이벤트 처리
- **반응형 상호작용**: 
  - 모바일: 터치 기반 드롭다운
  - 데스크톱: 마우스 호버 + 클릭 인터랙션

## Phase 4: SearchBar 구현 & Controlled Components 패턴 (모바일 퍼스트)
- **모바일 우선 검색바 설계**:
  - 전체 너비 활용, 큰 터치 타겟 (최소 44px 높이)
  - 모바일 키보드 친화적 input type 및 속성 설정
  - 작은 화면에서 읽기 쉬운 placeholder 텍스트
- **점진적 확장**:
  - 768px+: 검색바 최대 너비 제한, 중앙 정렬
  - 1024px+: 더 큰 여백, 검색 버튼 분리 배치
- **React 고급 패턴 학습**:
  - **Controlled Components**: useState를 활용한 완전 제어 컴포넌트 패턴
  - **상태 끌어올리기**: LocationSelector와 SearchBar 간 상태 공유
  - **단방향 데이터 플로우**: React의 핵심 철학을 실제 컴포넌트로 체험
  - **useEffect Hook**: 검색어 변경 시 디바운스 효과 구현 (useEffect + setTimeout)
  - **생명주기 관리**: Mount, Update, Unmount 이해 및 cleanup 함수 구현
  - **의존성 배열**: [], [state], [props] 각각의 차이점과 사용법 실습
- **반응형 상호작용**:
  - 모바일: 터치 포커스, 키보드 표시 최적화
  - 데스크톱: 마우스 호버, 키보드 네비게이션

## Phase 5: PopularTags 구현 & 컴포넌트 간 통신 (모바일 퍼스트)
- **모바일 우선 태그 레이아웃**:
  - 가로 스크롤 방식으로 모든 태그 표시
  - 터치 스크롤 최적화 (touch-action, scroll-behavior)
  - 적절한 태그 크기 및 간격 (최소 터치 타겟 44px)
- **점진적 확장**:
  - 768px+: 2-3줄 래핑 레이아웃 옵션
  - 1024px+: 더 큰 태그, 멀티라인 그리드 레이아웃
- **React 컴포넌트 통신 학습**:
  - **형제 컴포넌트 통신**: 태그 클릭 시 SearchBar에 값 전달하는 패턴
  - **이벤트 핸들러**: 태그 클릭 이벤트를 부모를 통해 형제 컴포넌트로 전달
  - **데이터 흐름 완성**: LocationSelector ↔ SearchBar ↔ PopularTags 삼각 통신 구조
- **반응형 스타일링**:
  - 모바일: 터치 피드백, 스크롤 인디케이터
  - 데스크톱: 호버 효과, 포커스 스타일

## Phase 6: CategoryGrid 구현 & 조건부 렌더링 심화 (모바일 퍼스트)
- **모바일 우선 그리드 레이아웃**:
  - 1열 세로 스택 (기본): 터치하기 쉬운 카드 크기
  - 최소 터치 타겟 44px, 충분한 카드 간격
  - 모바일에 최적화된 아이콘 크기 및 텍스트
- **점진적 그리드 확장**:
  - 768px+: 2열 그리드 레이아웃
  - 1024px+: 4열 그리드 레이아웃 (최종 데스크톱)
- **React 고급 패턴 학습**:
  - **조건부 렌더링 심화**: 
    - 카테고리 데이터 유무에 따른 로딩/에러 상태 표시
    - 삼항 연산자, && 연산자를 활용한 조건부 렌더링
    - 디바이스별 카테고리 표시 개수 조건 처리
  - **리스트 렌더링**: 7개 카테고리 데이터 구조화 및 map 함수 활용
  - **컴포넌트 구조화**: CategoryGrid 컨테이너 + CategoryCard 개별 컴포넌트
- **반응형 인터랙션**:
  - 모바일: 터치 피드백, 간단한 애니메이션
  - 데스크톱: 호버 효과, 트랜지션 애니메이션

## Phase 7: API 호출 & 비동기 처리
- **API 호출**: fetch API 및 axios 활용
  - 지역 목록 데이터 API 호출
  - 인기 검색어 데이터 가져오기
  - 카테고리 정보 API 연동
- **비동기 상태 관리**: 
  - 로딩, 성공, 에러 상태 처리
  - async/await 패턴 구현
  - useEffect와 API 호출 연동
- **에러 핸들링**: API 실패 시 사용자 친화적 메시지 표시

## Phase 8: React Router 도입 & 네비게이션
- **React Router 설정**: 
  - BrowserRouter, Routes, Route 구성
  - 메인 페이지와 검색 결과 페이지 분리
- **네비게이션**: 
  - 카테고리 클릭 시 해당 페이지로 이동
  - 검색 시 결과 페이지로 라우팅
  - useNavigate, useParams Hook 활용
- **동적 라우팅**: 지역별, 카테고리별 URL 파라미터 처리

## Phase 9: Context API 전역 상태관리 도입
- React Context API 설정
- 전역 상태 설계 (선택된 지역, 검색어, API 데이터)
- useState에서 Context로 상태 이전
- Provider 패턴 구현
- useContext Hook 활용

## Phase 10: Redux Toolkit 상태관리 전환 실습 (필수)
- **핵심 목표**: Context API 한계 체험 및 Redux 패턴 완전 학습
- Redux Toolkit 설치 및 설정
- **필수 실습**: Context API 상태를 Redux로 완전 마이그레이션
- Store, Slice, Action 구조 이해 및 구현
- useSelector, useDispatch Hook 활용
- **비교 분석**: Context API vs Redux 장단점 정리
- **상태관리 성숙도**: 프로젝트 규모별 도구 선택 기준 학습
- Redux DevTools 활용

# Logical Dependency Chain
## 기반 구축 순서
1. **프로젝트 설정** → 모든 개발의 기반
2. **다크 테마 색상 시스템** → CSS 변수 기반 테마 구축
3. **기본 컴포넌트 구조** → 재사용 가능한 다크 테마 컴포넌트 기반
4. **헤더 구현** → 페이지 최상단부터 다크 테마 구현
5. **히어로 섹션 & LocationSelector** → React 기본 상태 관리 도입
6. **SearchBar & Controlled Components** → 고급 상태 관리 패턴 확립

## 기능 확장 순서
1. **반응형 기반 시스템** → 모바일 퍼스트 CSS 구조 및 브레이크포인트 시스템 구축
2. **모바일 퍼스트 컴포넌트** → 각 컴포넌트를 모바일부터 구현하여 점진적 확장
3. **React 기본 개념** → useState, Props, 이벤트 핸들링을 실제 반응형 컴포넌트에서 학습
4. **상태 관리 심화** → Controlled Components, 상태 끌어올리기를 반응형 SearchBar에서 체험
5. **컴포넌트 간 통신** → PopularTags 반응형 레이아웃에서 형제 컴포넌트 데이터 공유 패턴 학습
6. **조건부 렌더링** → CategoryGrid 반응형 그리드에서 상태와 뷰포트에 따른 UI 변화
7. **API 통신** → 외부 데이터 연동 및 비동기 처리
8. **라우팅 도입** → 다중 페이지 SPA 구현
9. **전역 상태 관리** → Context API를 통한 상태 공유
10. **Redux 상태관리 전환** → Context API 한계 체험 및 Redux 패턴 필수 학습

## 교육적 개발 접근법 (Git Checkpoint 방식)

### 1. 단일 프로젝트 연속 개발
- **하나의 완성된 프로젝트**: 실제 개발 프로세스와 100% 일치
- **점진적 기능 추가**: 각 Phase마다 새로운 React 개념을 자연스럽게 도입
- **실무 시뮬레이션**: Git을 활용한 버전 관리 및 협업 경험
- **통합적 학습**: 컴포넌트 간 상호작용을 통한 전체 아키텍처 이해

### 2. Git Checkpoint 복구 시스템
- **유연한 진도 조절**: 개인 역량에 맞춰 원하는 시점부터 시작 가능
- **안전한 실험**: 언제든 이전 안정 상태로 복구 가능
- **부분 학습**: 특정 Phase만 집중적으로 복습 가능
- **협업 준비**: 실제 개발팀에서 사용하는 Git 워크플로우 경험

### 3. 자연스러운 개념 도입
- **필요에 의한 학습**: 기능 구현 중 자연스럽게 React 개념 필요성 체감
- **문맥적 이해**: 추상적 개념을 구체적 문제 해결 과정에서 학습
- **반복 강화**: 동일 개념이 다양한 컴포넌트에서 반복 적용되며 숙달
- **점진적 복잡성**: 간단한 컴포넌트부터 시작하여 점차 복잡한 상태 관리까지

### 4. 실습 구조 설계
```
daangn-clone/
├── reference/              # 디자인 참고 자료 (개발자 참고용)
│   ├── rendered-html/      # Elements 탭에서 추출한 HTML 구조
│   │   ├── header.html    # 헤더 영역 HTML
│   │   ├── hero-section.html # 히어로 섹션 HTML
│   │   ├── category-grid.html # 카테고리 그리드 HTML
│   │   └── popular-locations.html # 인기 지역 섹션 HTML
│   ├── computed-styles/    # Computed 탭에서 추출한 스타일
│   │   ├── header-styles.css
│   │   ├── hero-styles.css
│   │   └── category-styles.css
│   ├── data/              # 표준 데이터 구조
│   │   └── mockData.js    # 카테고리, 태그, 위치, 지역 데이터
│   ├── design-tokens.txt   # 폰트, 간격 등 정리
│   └── assets/             # 이미지, 아이콘 에셋
└── main/                   # 단일 React 프로젝트 (Git Checkpoint 방식)
    ├── src/
    │   ├── components/     # React 컴포넌트들
    │   ├── data/          # 프로젝트용 데이터 (reference/data 복사본)
    │   ├── styles/        # CSS 파일들
    │   └── App.js         # 메인 앱 컴포넌트
    ├── public/            # 정적 파일들
    ├── package.json       # 의존성 관리
    └── README.md          # 프로젝트 가이드
```

### 4. 학습 패턴
1. **점진적 구현**: main/ 프로젝트에서 단계별 기능 추가 (다크 테마 일관성 유지)
2. **개념 체험**: 구현 과정에서 자연스럽게 React 개념 습득
3. **체크포인트 활용**: 막힐 때 이전 안정 상태로 복구
4. **Git 워크플로우**: 실제 개발팀 협업 방식 체험

# Risks and Mitigations  
## 기술적 도전 과제
- **리스크**: React 초보자의 컴포넌트 구조 이해 부족
- **해결방안**: 단계별 가이드와 명확한 컴포넌트 분리

- **리스크**: 반응형 디자인 구현의 복잡성
- **해결방안**: 모바일 퍼스트 접근법과 점진적 개선

- **리스크**: 당근마켓 디자인의 정확한 복제 어려움
- **해결방안**: 상세한 디자인 스펙 문서화 및 참고 이미지 활용

- **리스크**: 상태관리 도구 전환 시 복잡성 증가
- **해결방안**: 점진적 마이그레이션과 각 단계별 비교 분석

- **리스크**: 당근마켓 디자인 참고에 따른 저작권 이슈
- **해결방안**: 
  - 교육 목적으로만 사용하고 상업적 배포 금지
  - 원본 HTML/CSS는 참고용으로만 활용
  - 최종 결과물은 독립적인 React 컴포넌트로 구현
  - 당근마켓 로고/이미지는 대체 이미지 사용

## MVP 정의 (교육용)
- **학습용 MVP**: Phase 1-5 완료 시점 (React 기본 패턴 마스터)
- **프로젝트 MVP**: Phase 1-9 완료 시점 (기본 기능 및 전역 상태관리 완성)
- **완성형 MVP**: Phase 1-10 완료 시점 (Redux 상태관리까지 필수 완성)
- **핵심 가치**: React + Redux 상태관리 완전 이해 + 모바일 퍼스트 반응형 실무 경험
- **확장 가능**: Redux 기반으로 실제 백엔드 연동 및 고급 기능 확장 가능

## 자원 제약 고려 (교육 관점)
- **시간 효율성**: 
  - 개념 학습 (concepts/) + 프로젝트 적용 (main/) 이중 구조로 효율적 학습
  - 개별 진도에 맞춘 선택적 학습 가능
- **학습 곡선 최적화**: 
  - 반복 학습을 통한 개념 완전 정착
  - 오류 격리로 학습 방해 요소 최소화
- **강사 지원 도구**: 
  - 각 단계별 완성된 코드 제공
  - 개념별 독립 실습으로 맞춤형 지도 가능
- **학습자 자율성**: 
  - playground/ 환경에서 자유 실험
  - concepts/ 폴더에서 약한 부분 집중 보강

# Appendix  
## 참고 자료
- 당근마켓 공식 웹사이트: https://www.daangn.com
- React 공식 문서: https://react.dev
- Vite 공식 문서: https://vitejs.dev
- React Router 공식 문서: https://reactrouter.com
- Axios 공식 문서: https://axios-http.com
- Redux Toolkit 공식 문서: https://redux-toolkit.js.org

## 디자인 참고 방법 (SPA 대응)

### 📋 **실제 렌더링된 HTML 추출**
1. **개발자 도구 Elements 탭**: 
   - 실제 브라우저에 렌더링된 HTML 구조 확인
   - 각 섹션별로 HTML 블록 복사하여 저장
2. **HTML 구조 분석**:
   - 헤더, 히어로 섹션, 카테고리 그리드 각각 분리
   - 클래스명, 구조 체계 파악

### 🎨 ** 스타일 정보 수집**
1. **Computed 탭 활용**:
   - 각 요소에 실제 적용된 CSS 값들 확인
   - font-size, color, margin, padding 등 수치 정리
2. **디자인 토큰 추출**:
   - 주요 컬러: `#FF7E36` (당근 주황), 그레이 스케일
   - 폰트: 크기, 굵기, 행간 정보
   - 간격 시스템: 일관된 margin/padding 값들

### 📱 **반응형 분석**
- **Device Mode**: 모바일/태블릿/데스크톱 전환 테스트
- **브레이크포인트 확인**: 레이아웃 변화 지점 파악
- **미디어 쿼리**: Sources 탭에서 CSS 미디어 쿼리 확인

## 기술 스펙
- **Node.js**: 18.0.0 이상
- **Package Manager**: npm 또는 yarn
- **브라우저 지원**: Chrome, Firefox, Safari, Edge (최신 2버전)
- ** 브레이크포인트**: 
  - Mobile: 320px - 768px
  - Tablet: 768px - 1024px  
  - Desktop: 1024px 이상

## 학습 목표
- React Functional Components 및 Hooks 완전 이해
- 컴포넌트 기반 아키텍처 및 재사용성 구현
- **React 핵심 개념 단계별 학습**:
  - 컴포넌트 기반 아키텍처를 통한 UI 분리
  - Props와 State를 실제 프로젝트에서 자연스럽게 습득
  - 상태 끌어올리기 패턴을 검색창-태그 연동에서 체험
  - useEffect 생명주기를 디바운스 구현으로 체험
- **실무 중심 패턴 학습**:
  - Controlled Components를 검색 폼에서 직접 구현
  - 조건부 렌더링을 드롭다운 메뉴에서 적용
  - 이벤트 핸들링을 카테고리 클릭에서 구현
  - 동적 스타일링을 호버 효과에서 체험
- **모던 개발 워크플로우**:
  - Git Checkpoint를 통한 버전 관리 체험
  - 점진적 기능 추가를 통한 실무 개발 프로세스 경험
  - 컴포넌트 리팩토링과 최적화 실습
- **라우팅 및 네비게이션**: React Router를 통한 SPA 구현
- **API 통신 및 비동기 처리**: 
  - fetch/axios를 통한 HTTP 통신
  - async/await 패턴 및 에러 핸들링
- **모바일 퍼스트 반응형 설계**:
  - 프로젝트 시작부터 모바일 우선 접근법 체득
  - 점진적 향상(Progressive Enhancement) 실무 경험
  - 브레이크포인트 시스템 설계 및 CSS Grid/Flexbox 활용
  - 터치 인터랙션 최적화 및 다양한 디바이스 지원
- **기본 웹 표준 및 접근성**:
  - 시맨틱 HTML 작성 및 기본 접근성 고려
  - 반응형 디자인의 기본 원칙 이해
  - 모바일 퍼스트 접근법을 통한 실무적 개발 경험
- **상태 관리 도구 진화 과정 (필수)**:
  - useState 로컬 상태 관리
  - Context API 전역 상태 관리
  - **Redux Toolkit 중앙집중식 상태관리 (필수 마스터)**
  - 각 도구의 장단점 및 마이그레이션 경험
  - **Redux가 필수인 이유**: 대부분 기업에서 사용하는 표준 상태관리 도구